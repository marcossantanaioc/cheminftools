# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/featurizer.ipynb.

# %% auto 0
__all__ = ['get_rdkit2d_descriptors', 'MolFeaturizer']

# %% ../../notebooks/featurizer.ipynb 2
import pandas as pd
import numpy as np
from rdkit import Chem
from ..utils import convert_smiles
from rdkit.Chem import MACCSkeys,AllChem,rdMolDescriptors, rdFingerprintGenerator, Descriptors
from rdkit.DataStructs.cDataStructs import ConvertToNumpyArray
from functools import partial
from typing import List, Collection
import multiprocessing as mp
from fastprogress.fastprogress import master_bar, progress_bar
from time import sleep

# %% ../../notebooks/featurizer.ipynb 8
def get_rdkit2d_descriptors(mol:Chem.rdchem.Mol):
    
    """
    Generates 200 RDKit constitutional descriptors for a `mol` object.
    
    Arguments:
        mol : Chem.rdchem.Mol
            A RDKit Mol object.
            
    Returns:
        descs : numpy.array
            An array with the calculated descriptors.
    
    
    """
    descs = np.array([func(mol) for name,func in descriptor_dict.items()]).reshape(1, -1)
    return descs

# %% ../../notebooks/featurizer.ipynb 10
class MolFeaturizer:
    
    """Creates a Fingerprinter to perform molecular featurization

    Attributes:

        params : dict, optional
            A dictionary of parameters for an rdkit generator.

        descriptor_type : str
            A string representing a descriptor available in ´rdFingerprintGenerator´

        generator : 
            A fingerprinter generator available in ´rdFingerprintGenerator´
            


    Arguments:

        descriptor_type : str
            A string representing a descriptor available in ´rdFingerprintGenerator´

        params : dict, optional
            A dictionary of parameters for an rdkit generator.


          """
              
    def __init__(self, descriptor_type : str, params:dict={}):
        
        self.params = params
        self.descriptor_type = descriptor_type
        
        self.DESCS = {'morgan': rdFingerprintGenerator.GetMorganGenerator,
                      'atom_pairs':rdFingerprintGenerator.GetAtomPairGenerator,
                      'rdkit':rdFingerprintGenerator.GetRDKitFPGenerator, 
                      'rdkit2d':get_rdkit2d_descriptors, 
                      'torsion':rdFingerprintGenerator.GetTopologicalTorsionGenerator,
                      'maccs': MACCSkeys.GenMACCSKeys}
        
        if descriptor_type in ['morgan','atom_pairs','rdkit','torsion']:
            self.generator = self.set_params(self.DESCS[descriptor_type], params)
        else:
            self.generator = self.DESCS[descriptor_type]
            
    
    def set_params(self, generator, params:dict):
        
        """
        Set parameters ´params´ for ´generator´
        
        """

        
        try:
            generator = generator(**params)
            
        except:
            print(f'The parameters {params} are not valid for generator {self.DESCS[self.descriptor_type].__name__}.\nSee RDKit: https://www.rdkit.org/docs/source/rdkit.Chem.rdFingerprintGenerator.html')
            print('Returning the generator with default parameters.')
            generator = generator()

        return generator
    
    
    def process_smiles(self, smi, use_counts:bool=False):
        
        """
        Generate features for one SMILES.
        
        Arguments:
        
            smi : str
                A SMILES representing a molecular structure
                
            use_counts : bool (default=False)
                Whether to consider feature's counts for fingerprint generation.
                
                
        
        """
        mol = convert_smiles(smi,sanitize=True)
        
        if not mol:
            return None
        
        if self.descriptor_type == 'maccs':
            fps = np.array([])
            ConvertToNumpyArray(self.generator(mol), fps)
            return fps.reshape(1, -1)
        
        elif self.descriptor_type == 'rdkit2d':
            return self.generator(mol)
        
        else:
        
            if use_counts:
                fps =  self.generator.GetCountFingerprintAsNumPy(mol)
                return fps.reshape(1, -1)

            fps = self.generator.GetFingerprintAsNumPy(mol)
            return fps.reshape(1, -1)
    
    def process_smiles_list(self, smiles_list : List[str], **kwargs):
        
        """
        Generate features for a list of SMILES.
        
        Arguments:
        
            smiles_list : List[str]
                A list of SMILES.
                
        Keyword arguments:
        
            use_counts : bool (default=False)
                Whether to consider feature's counts for fingerprint generation.
                
        
        """
        func = partial(self.process_smiles, **kwargs)
        fps = list(progress_bar(map(func, smiles_list), total=len(smiles_list)))
        #fps = list(map(func, tqdm(smiles_list, desc='Calculating fingerprints', position=0, leave=True)))
        #fps = list(progress_bar(mp_pool.imap(cls.process_mol, cls.raw_smiles), total=len(cls.raw_smiles), comment='Processing SMILES.'))
        
        if len(fps)>1:
            return np.vstack(fps)
        return fps[-1]
            
