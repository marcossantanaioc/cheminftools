[
  {
    "objectID": "tools.filtering.html",
    "href": "tools.filtering.html",
    "title": "Filtering",
    "section": "",
    "text": "source\n\nMolFiltering\n\n MolFiltering ()\n\nFilter a molecular dataset from unwanted structures\nUse factory methods MolFiltering.from_list, MolFiltering.from_df or MolFiltering.from_csv instead of accessing the class directly.\n\nsource\n\n\nMolFiltering.from_df\n\n MolFiltering.from_df (df:pandas.core.frame.DataFrame, smiles_col:str,\n                       alerts_dict:dict=None, n_jobs:int=1)\n\nFactory method to process a pandas.DataFrame\nArguments:\ndf : pd.DataFrame\n    A pandas Dataframe with molecular data for sanitization.\n\nsmiles_col : str\n    The name of the column with SMILES for each molecule.\nReturns:\nalerts_df : `pandas.DataFrame`\n\n    A `pandas.DataFrames` with flagged molecules.\n\nsource\n\n\nMolFiltering.from_csv\n\n MolFiltering.from_csv (data_path:str, smiles_col:str,\n                        alerts_dict:dict=None, n_jobs:int=1, sep:str=',')\n\nFactory method to process a CSV file.\nArguments:\ndata_path : str\n    Path to CSV file\n\nsmiles_col : str\n    The name of the column with SMILES for each molecule.\nReturns:\nalerts_df : `pandas.DataFrame`\n\n    A `pandas.DataFrames` with flagged molecules.\n\nsource\n\n\nMolFiltering.from_list\n\n MolFiltering.from_list (smiles_list, alerts_dict:dict=None, n_jobs:int=1,\n                         **kwargs)\n\nFactory method to process a list of SMILES.\nArguments:\nsmiles : A List, Array, or any Iterable (except strings)\n    SMILES ready for sanitization\nReturns:\nalerts_df : `pandas.DataFrame`\n\n    A `pandas.DataFrames` with flagged molecules."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "chemtools",
    "section": "",
    "text": "Chemtools offer a collection of cheminformatics scripts for daily tasks. Currently supported tasks include:\n1 - Standardization of chemical structures\n\n2 - Calculation of molecular descriptors\n\n3 - Filtering datasets using predefined alerts (e.g. PAINS, Dundee, Glaxo, etc.)"
  },
  {
    "objectID": "tools.sanitizer.html",
    "href": "tools.sanitizer.html",
    "title": "Standardizer",
    "section": "",
    "text": "source\n\n\n\n find_inchikey_duplicates (mol_list)\n\n\nsource\n\n\n\n\n build_inchi_dict (smiles_list)\n\n\nsource\n\n\n\n\n mol_to_inchi (mol)\n\nConverts a rdchem.Mol object into InCHI keys\n\nsource\n\n\n\n\n process_duplicates (data, smiles_col:str, act_col:str, id_col:str,\n                     cols_to_check:list=None, stereo_col:str='Stereo',\n                     keep:str='first')\n\nRemoves duplicated records from a dataset\nThe removal of duplicates is based on the stereochemical information provided by dotmatics, SMILES, ids and bioactivity records. Records sharing the same SMILES, IDs and/or bioactivity information, are merged by taking the median bioactivity value. This step is used to clean records with multiple measurements.\nDuplicated records with different IDs and/or bioactivities are treated separately because they usually represent different isomers. For these compounds, the duplicated records are first split into to_merge and to_keep portions, indicating the different compounds should be considered to be kept in the dataset or merged into the same record, respectively. Duplicated records are considered for keeping, if the difference between max and min bioactivity is larger or equal to 1.0 (e.g. 1 pIC50 unit); else the records are considered for merging.\nCompounds marked for keeping filtered by the keep parameter. If keep == True, the duplicate with highest bioactivity value is kept; else the duplicate with lowest bioactivity is kept. Compounds marked for merging are combined by taking the median of all columns.\nArguments:\n    data : pd.DataFrame\n        A pandas Dataframe with molecular data for sanitization.\n\n    smiles_col : str\n        The name of the column with SMILES for each molecule.\n\n    id_col : str\n        The name of the column with IDs for each molecule.\n\n    act_col : str\n        The name of the column with bioactivity data for each molecule. \n\n    cols_to_check : list\n        A list of columns to use as reference to find duplicates.\n\nReturns:\n    recombined_data : `pandas.DataFrame`\n\n        A sanitized version of the `data` without duplicates.\n\nsource\n\n\n\n\n remove_racemic (df, smiles_col, stereo_col)\n\nRemove records containing Mixture or Racemic information in the stereochemistry column from Dotmatics Compounds are only removed if the SMILES are duplicated and single isomer is also present.\nArguments:\ndf : `pandas.DataFrame`\n\n    A pandas dataframe.\n\nsmiles_col : str\n\n    A string representing the column of `df` with SMILES.\n\nstereo_col : str\n\n    A string representing the column of `df` with stereochemistry information for each molecule.          \nReturns: A list of columns with modifier values\n\nsource\n\n\n\n\n get_stereo_info (mol)\n\n\nsource\n\n\n\n\n normalize_mol (mol)\n\nStandardize a rdchem.Mol object.\nArguments:\nmol : rdchem.Mol\nReturns: mol : rdchem.Mol A standardized version of mol.\nSteps:\n\nConvert a SMILES to a rdchem.Mol object or return mol if it’s already a rdchem.Mol\nKekulize, check valencies, set aromaticity, conjugation and hybridization, remove hydrogens, disconnect metal atoms, normalize the molecule and reionize it.\nGet parent fragment if multiple molecules (e.g. mixtures) are present\nNeutralize parent molecule\n\n\nsource\n\n\n\n\n remove_unwanted (mol)\n\nRemove molecules with unwanted elements (check the _unwanted definition) and isotopes\n\nsource\n\n\n\n\n add_nitrogen_charges (mol)\n\nFixes charge on nitrogen if its valence raises an Exception on RDKit See the discussion on: https://github.com/rdkit/rdkit/issues/3310"
  },
  {
    "objectID": "tools.sanitizer.html#molcleaner",
    "href": "tools.sanitizer.html#molcleaner",
    "title": "Standardizer",
    "section": "MolCleaner",
    "text": "MolCleaner\n\nsource\n\nMolCleaner\n\n MolCleaner ()\n\nSanitize a molecular dataset\nUse static methods MolCleaner.from_df or MolCleaner.from_csv instead of accessing the class directly.\n\nStandardize unknown stereochemistry (Handled by the RDKit Mol file parser)\n\nFix wiggly bonds on sp3 carbons - sets atoms and bonds marked as unknown stereo to no stereo\nFix wiggly bonds on double bonds – set double bond to crossed bond\n\nClears S Group data from the mol file\nKekulize the structure\nRemove H atoms (See the page on explicit Hs for more details)\nNormalization: Fix hypervalent nitro groups Fix KO to K+ O- and NaO to Na+ O- (Also add Li+ to this) Correct amides with N=COH Standardise sulphoxides to charge separated form Standardize diazonium N (atom :2 here: [*:1]-[N;X2:2]#[N;X1:3]>>[*:1]) to N+ Ensure quaternary N is charged Ensure trivalent O ([*:1]=[O;X2;v3;+0:2]-[#6:3]) is charged Ensure trivalent S ([O:1]=[S;D2;+0:2]-[#6:3]) is charged Ensure halogen with no neighbors ([F,Cl,Br,I;X0;+0:1]) is charged\nThe molecule is neutralized, if possible. See the page on neutralization rules for more details.\nRemove stereo from tartrate to simplify salt matching\nNormalise (straighten) triple bonds and allenes\n\nThe curation steps in ChEMBL structure pipeline were augmented with additional steps to identify duplicated entries 9. Find stereo centers 10. Generate inchi keys 11. Find duplicated SMILES. If the same SMILES is present multiple times, two outcomes are possible. i. The same compound (e.g. same ID and same SMILES) ii. Isomers with different SMILES, IDs and/or activities\nIn case i), the compounds are merged by taking the median values of all numeric columns in the dataframe. \nFor case ii), the compounds are further classified as 'to merge' or 'to keep' depending on the activity values.\n    a) Compounds are considered for mergining (to merge) if the difference in acvitities is less than 1log unit.\n    b) Compounds are considered for keeping as individual entries (to keep) if the difference in activities is larger than 1log unit. In this case, the user can\n    select which compound to keep - the one with highest or lowest activity."
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "Utils",
    "section": "",
    "text": "source\n\nconvert_smiles\n\n convert_smiles (mol, sanitize=False)"
  }
]